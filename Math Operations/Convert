-- 01.12.2018 16:40:49 AR V1.0a

generic = {
  parameter = {
    a1 = 32.0,
    q1 = 0.0,
    a2 = 212.0,
    q2 = 100.0
  },

  init = function(self)
    block.setInputsPinCount(1)
    block.setOutputsPinCount(1)
    block.modifyFlags('SupressStartFunctionCall', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Bias', [[
Define a linear funktion by two points.
Useful for unit conversion (the default values convert °F to °C).
]])
    gui.add('Edit', 'EditP1A', 'Point 1: Convert', {Left = 120, Top = 80})
    gui.add('Edit', 'EditP1Q', 'to', {Left = 260, Top = 80})
    gui.add('Edit', 'EditP2A', 'Point 2: Convert', {Left = 120, Top = 108})
    gui.add('Edit', 'EditP2Q', 'to', {Left = 260, Top = 108})
    gui.add('CheckBox', 'CheckBoxLimit', 'Limit output to point 1 and point 2', {Width = 200})
    gui.set('EditP1A', 'Number', self.parameter.a1)
    gui.set('EditP1Q', 'Number', self.parameter.q1)
    gui.set('EditP2A', 'Number', self.parameter.a2)
    gui.set('EditP2Q', 'Number', self.parameter.q2)
    gui.set('CheckBoxLimit', 'Checked', self.parameter.limit)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.a1 = gui.get('EditP1A', 'Number')
    self.parameter.q1 = gui.get('EditP1Q', 'Number')
    self.parameter.a2 = gui.get('EditP2A', 'Number')
    self.parameter.q2 = gui.get('EditP2Q', 'Number')
    self.parameter.limit = gui.get('CheckBoxLimit', 'Checked')
    return gui.assert(
      'Convert',
      self.parameter.a1 ~= self.parameter.a2, 'Input point values must be different'
    ) and
    gui.assert(
      'Convert',
      self.parameter.q1 ~= self.parameter.q2, 'Output point values must be different'
    )
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x50, "'+*'")
  end,

  generate = function(self)
    local source =
      [==[
        return {

          step = function(a)
            local q = A1 AQ21 Q1
            LIMIT
            return q
          end

        }
      ]==]
    local limit = ''
    if self.parameter.limit then
      if self.parameter.q1 < self.parameter.q2 then
        limit = 'if q < Q1 then q = Q1 elseif q > Q2 then q = Q2 end'
      else
        limit = 'if q < Q2 then q = Q2 elseif q > Q1 then q = Q1 end'
      end
      local replaces = {
        ['Q1'] = self.parameter.q1,
        ['Q2'] = self.parameter.q2,
      }
      limit = string.gsub(limit, '%a+%d*', replaces)
    end
    -- q = (a - a1) / (a2 - a1) * (q2 - q1) + q1
    local a21 = self.parameter.a2 - self.parameter.a1
    local q21 = self.parameter.q2 - self.parameter.q1
    local aq21 = 1.0 / a21 * q21
    local replaces = {
      ['A1'] = self.parameter.a1 == 0.0 and 'a ' or '(a - ' .. self.parameter.a1 .. ')' ,
      ['Q1'] = self.parameter.q1 == 0.0 and '' or '+ ' .. self.parameter.q1,
      ['AQ21'] = aq21 == 1.0 and '' or '* ' .. aq21,
      ['LIMIT'] = limit
    }
    return string.gsub(source, '%a+%d*', replaces)
  end,

}

